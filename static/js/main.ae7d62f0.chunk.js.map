{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list-components.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","SearchField","fetch","then","response","json","users","setState","e","this","target","value","filteremonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAEaA,EAAM,SAACC,GAAD,OACf,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCHbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJfO,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCHG,G,wDAlCb,aAAe,IAAD,8BACZ,gBACKC,MAAM,CACTR,SAAU,GACVS,YAAY,IAJF,E,qDAOd,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,0BAEzC,SAAaE,GACXC,KAAKF,SAAS,CAACN,YAAYO,EAAEE,OAAOC,U,oBAEtC,WAAU,IAAD,EACsBF,KAAKT,MAA3BR,EADA,EACAA,SAASS,EADT,EACSA,YACVW,EAAkBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC7CA,EAAQG,KAAKyB,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAca,KAAKb,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae7d62f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\nexport const Card= (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport './card-list.styles.css';\r\nexport const CardList = (props) => (\r\n    <div className=\"card-list\">\r\n    {props.monsters.map(monster =>(\r\n         <Card key={monster.id} monster={monster}></Card>\r\n    ))}\r\n    </div>\r\n);\r\n","import React from \"react\";\r\nimport './search-box.styles.css';\r\nexport const SearchBox =({placeholder,handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type=\"search\" \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n);","import React,{Component} from 'react';\nimport { CardList } from './components/card-list/card-list-components';\nimport { SearchBox } from \"./components/search-box/search-box.components\";\nimport './App.css';\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state={\n      monsters: [],\n      SearchField:''\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n  handleChange(e){\n    this.setState({SearchField:e.target.value})\n  }\n  render() {\n    const {monsters,SearchField}=this.state;\n    const filteremonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(SearchField.toLowerCase())\n    );\n    return(\n      <div className=\"App\">\n        <h1> Monster Rolodex</h1>      \n        <SearchBox \n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteremonsters}/>\n      \n      </div>\n    );\n  } \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}